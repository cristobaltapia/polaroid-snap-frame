#!/bin/bash
#======================================================================
# Project           : Polaroid-SNAP script
#
# Author            : Cristóbal Tapia Camú (crtapia at gmail dot com)
#
# Description       : A simple imageMagick script to apply to an image the same
#                     frame as obtained when taking a picture with the Polaroid-SNAP
#
#=======================================================================

__ScriptVersion="0.1"

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Display usage information.
#===============================================================================
function usage ()
{
    echo "Usage :  polaroid-snap [options] [--]

    Options:
    -i|input           Input file
    -p|photobooth      4 input files
    -m|move            Move the position of the image within the frame:
                       Options: top, bottom, left, right,
    -h|help            Display this message
    -v|version         Display script version"

}    # ----------  end of function usage  ----------


#-----------------------------------------------------------------------
# Option for anable/disable photobooth mode
photobooth=false
# Default image file (first passed argument
photo1=$1
# Variable for the output file
outfile=
# move picture within frame
move=center

#-----------------------------------------------------------------------
#  Handle command line arguments
#-----------------------------------------------------------------------

while getopts ":i:p:m:o:hv" opt
do
  case $opt in
    i|input       )  photo1=${OPTARG} ;;
    p|photobooth  )  eval "photo1=\$$((OPTIND-1))"
                     eval "photo2=\$$((OPTIND+0))"
                     eval "photo3=\$$((OPTIND+1))"
                     eval "photo4=\$$((OPTIND+2))"
                     photobooth=true
                     # shift getopts' index
                     OPTIND=$((OPTIND+3))
                     ;;
    m|move        )  move=${OPTARG} ;;
    o|output      )  outfile=${OPTARG} ;;
    h|help        )  usage; exit 0   ;;

    v|version     )  echo "$0 -- Version $__ScriptVersion"; exit 0   ;;

    * )  echo -e "\n  Option does not exist : $OPTARG\n"
          usage; exit 1   ;;

  esac    # --- end of case ---
done
shift $(($OPTIND-1))

#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Creates frame around the image
#===============================================================================
function apply_frame()
{
    # Size of the borders
    # - top:
    r_border_t=0.06
    # - bottom:
    r_border_b=0.06
    # - left:
    r_border_l=0.159
    # - right:
    r_border_r=0.033

    # Calculate white borders based on the percentages
    border_t=`echo "$r_border_t * $h" | bc`
    border_b=`echo "$r_border_b * $h" | bc`
    border_l=`echo "$r_border_l * $w" | bc`
    border_r=`echo "$r_border_r * $w" | bc`

    # Size of the regions to be cropped in the image
    set_crop_region

    # cropped regions of the original image
    # - top:
    crop_t=`echo "$r_crop_t * $h" | bc`
    # - bottom:
    crop_b=`echo "$r_crop_b * $h" | bc`
    # - left:
    crop_l=`echo "$r_crop_l * $w" | bc`
    # - right:
    crop_r=`echo "$r_crop_r * $w" | bc`

    # size of the inner image
    ww=`echo "$w - $border_l - $border_r" | bc`
    hh=`echo "$h - $border_t - $border_b" | bc`

    # Process the image with imageMagick
    convert ${photo1} -geometry ${h}x${h} \
            -geometry ${ww}x${hh} \
            -crop -${crop_r}+${crop_t} \
            -crop +${crop_l}-${crop_b} \
            aux_1.jpeg

    convert -size ${w}x${h} xc:white \
            aux_1.jpeg -geometry ${ww}x${hh}+${border_l}+${border_t} \
            -composite ${outfile}

}    # ----------  end of function apply_frame  ----------


function set_crop_region() {
    if [ "$move" == "center" ]; then
        a_t=0.05
        a_b=0.055
        a_l=0.035
        a_r=0.035
    elif [ "$move" == "top-right" ]; then
        a_t=0.0
        a_b=0.105
        a_l=0.070
        a_r=0.0
    fi
    # - top:
    r_crop_t=$a_t
    # - bottom:
    r_crop_b=$a_b
    # - left:
    r_crop_l=$a_l
    # - right:
    r_crop_r=$a_r
}


#===  FUNCTION  ================================================================
#         NAME:  usage
#  DESCRIPTION:  Reproduces the Photobboth style
#===============================================================================
function apply_photobooth() {
    # Size of the borders
    # - top:
    r_border_t=0.043
    # - bottom:
    r_border_b=0.039
    # - left:
    r_border_l=0.043
    # - right:
    r_border_r=0.023
    # - separation of single photos
    sep_in=0.022

    # Calculate white borders based on the percentages
    border_t=`echo "$r_border_t * $h" | bc`
    border_b=`echo "$r_border_b * $h" | bc`
    border_l=`echo "$r_border_l * $w" | bc`
    border_r=`echo "$r_border_r * $w" | bc`
    insep=`echo "$sep_in * $w" | bc`

    # Size of the regions to be cropped in the image
    # - top:
    r_crop_t=0.22
    # - bottom:
    r_crop_b=0.21
    # - left:
    r_crop_l=0.0
    # - right:
    r_crop_r=0.0

    # cropped regions of the original image
    # - top:
    crop_t=`echo "$r_crop_t * $h" | bc`
    # - bottom:
    crop_b=`echo "$r_crop_b * $h" | bc`
    # - left:
    crop_l=`echo "$r_crop_l * $w" | bc`
    # - right:
    crop_r=`echo "$r_crop_r * $w" | bc`

    # size of the inner image
    ww=`echo "$w * 0.453 " | bc`
    hh=`echo "$h * 0.439 " | bc`

    # calculate positions of each image
    pos_x1=$border_l
    pos_x2=`echo "$border_l + $ww + $insep" | bc`
    pos_y1=$border_t
    pos_y2=`echo "$border_t + $hh + $insep" | bc`

    convert $photo1 -crop -${crop_r}+${crop_t} -crop +${crop_l}-${crop_b} -geometry ${ww}x${hh} aux_1.jpeg
    convert $photo2 -crop -${crop_r}+${crop_t} -crop +${crop_l}-${crop_b} -geometry ${ww}x${hh} aux_2.jpeg
    convert $photo3 -crop -${crop_r}+${crop_t} -crop +${crop_l}-${crop_b} -geometry ${ww}x${hh} aux_3.jpeg
    convert $photo4 -crop -${crop_r}+${crop_t} -crop +${crop_l}-${crop_b} -geometry ${ww}x${hh} aux_4.jpeg

    convert -size ${w}x${h} xc:white \
            aux_1.jpeg -geometry ${ww}x${hh}+${pos_x1}+${pos_y1} -composite \
            aux_2.jpeg -geometry ${ww}x${hh}+${pos_x2}+${pos_y1} -composite \
            aux_3.jpeg -geometry ${ww}x${hh}+${pos_x1}+${pos_y2} -composite \
            aux_4.jpeg -geometry ${ww}x${hh}+${pos_x2}+${pos_y2} -composite \
            ${outfile}
}    # ----------  end of function apply_photobooth  ----------


# Get extension of the image
extension="${photo1##*.}"

# Set the extension to the output file
echo $outfile
if [ "$outfile" == "" ]; then
    outfile=out.$extension
fi


# TODO: get the original size of the image

# Dimensions of the picture (in pixels)
w=1520
h=1000

if [ "$photobooth" == false ]; then
    apply_frame
else
    apply_photobooth
fi


# Delete temporary files
rm aux_*.jpeg
